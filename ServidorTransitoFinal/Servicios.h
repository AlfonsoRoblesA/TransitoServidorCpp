/**
 * Autogenerated by Thrift Compiler (0.12.0)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
#ifndef Servicios_H
#define Servicios_H

#include <thrift/TDispatchProcessor.h>
#include <thrift/async/TConcurrentClientSyncInfo.h>
#include "serv_types.h"

namespace Thrift {

#ifdef _MSC_VER
  #pragma warning( push )
  #pragma warning (disable : 4250 ) //inheriting methods via dominance 
#endif

class ServiciosIf {
 public:
  virtual ~ServiciosIf() {}
  virtual bool validarCredenciales(const std::string& usuario, const std::string& contrasena) = 0;
  virtual void registrarUsuario(const UsuarioClienteEscritorio& usuario) = 0;
  virtual void recuperarIncidentes(std::vector<Incidente> & _return) = 0;
  virtual void recuperarReportes(std::vector<Reporte> & _return, const int32_t idIncidente) = 0;
  virtual void recuperarVehiculoInvolucrado(Vehiculo& _return, const int32_t idVehiculo) = 0;
  virtual void recuperarConductorInvolucrado(Conductor& _return, const int32_t idConductor) = 0;
  virtual void recuperarFotosReportadas(std::vector<Foto> & _return, const int32_t idReporte) = 0;
  virtual void dictaminarIncidente(const Dictamen& dic) = 0;
  virtual bool validarUsuario(const std::string& usuario) = 0;
  virtual bool validarFolio(const std::string& folio) = 0;
  virtual void recuperarUsuario(UsuarioClienteEscritorio& _return, const std::string& usuario) = 0;
  virtual void actualizarContrasena(const int32_t idUsuario, const std::string& contrasena) = 0;
};

class ServiciosIfFactory {
 public:
  typedef ServiciosIf Handler;

  virtual ~ServiciosIfFactory() {}

  virtual ServiciosIf* getHandler(const ::apache::thrift::TConnectionInfo& connInfo) = 0;
  virtual void releaseHandler(ServiciosIf* /* handler */) = 0;
};

class ServiciosIfSingletonFactory : virtual public ServiciosIfFactory {
 public:
  ServiciosIfSingletonFactory(const ::apache::thrift::stdcxx::shared_ptr<ServiciosIf>& iface) : iface_(iface) {}
  virtual ~ServiciosIfSingletonFactory() {}

  virtual ServiciosIf* getHandler(const ::apache::thrift::TConnectionInfo&) {
    return iface_.get();
  }
  virtual void releaseHandler(ServiciosIf* /* handler */) {}

 protected:
  ::apache::thrift::stdcxx::shared_ptr<ServiciosIf> iface_;
};

class ServiciosNull : virtual public ServiciosIf {
 public:
  virtual ~ServiciosNull() {}
  bool validarCredenciales(const std::string& /* usuario */, const std::string& /* contrasena */) {
    bool _return = false;
    return _return;
  }
  void registrarUsuario(const UsuarioClienteEscritorio& /* usuario */) {
    return;
  }
  void recuperarIncidentes(std::vector<Incidente> & /* _return */) {
    return;
  }
  void recuperarReportes(std::vector<Reporte> & /* _return */, const int32_t /* idIncidente */) {
    return;
  }
  void recuperarVehiculoInvolucrado(Vehiculo& /* _return */, const int32_t /* idVehiculo */) {
    return;
  }
  void recuperarConductorInvolucrado(Conductor& /* _return */, const int32_t /* idConductor */) {
    return;
  }
  void recuperarFotosReportadas(std::vector<Foto> & /* _return */, const int32_t /* idReporte */) {
    return;
  }
  void dictaminarIncidente(const Dictamen& /* dic */) {
    return;
  }
  bool validarUsuario(const std::string& /* usuario */) {
    bool _return = false;
    return _return;
  }
  bool validarFolio(const std::string& /* folio */) {
    bool _return = false;
    return _return;
  }
  void recuperarUsuario(UsuarioClienteEscritorio& /* _return */, const std::string& /* usuario */) {
    return;
  }
  void actualizarContrasena(const int32_t /* idUsuario */, const std::string& /* contrasena */) {
    return;
  }
};

typedef struct _Servicios_validarCredenciales_args__isset {
  _Servicios_validarCredenciales_args__isset() : usuario(false), contrasena(false) {}
  bool usuario :1;
  bool contrasena :1;
} _Servicios_validarCredenciales_args__isset;

class Servicios_validarCredenciales_args {
 public:

  Servicios_validarCredenciales_args(const Servicios_validarCredenciales_args&);
  Servicios_validarCredenciales_args& operator=(const Servicios_validarCredenciales_args&);
  Servicios_validarCredenciales_args() : usuario(), contrasena() {
  }

  virtual ~Servicios_validarCredenciales_args() throw();
  std::string usuario;
  std::string contrasena;

  _Servicios_validarCredenciales_args__isset __isset;

  void __set_usuario(const std::string& val);

  void __set_contrasena(const std::string& val);

  bool operator == (const Servicios_validarCredenciales_args & rhs) const
  {
    if (!(usuario == rhs.usuario))
      return false;
    if (!(contrasena == rhs.contrasena))
      return false;
    return true;
  }
  bool operator != (const Servicios_validarCredenciales_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const Servicios_validarCredenciales_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class Servicios_validarCredenciales_pargs {
 public:


  virtual ~Servicios_validarCredenciales_pargs() throw();
  const std::string* usuario;
  const std::string* contrasena;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _Servicios_validarCredenciales_result__isset {
  _Servicios_validarCredenciales_result__isset() : success(false) {}
  bool success :1;
} _Servicios_validarCredenciales_result__isset;

class Servicios_validarCredenciales_result {
 public:

  Servicios_validarCredenciales_result(const Servicios_validarCredenciales_result&);
  Servicios_validarCredenciales_result& operator=(const Servicios_validarCredenciales_result&);
  Servicios_validarCredenciales_result() : success(0) {
  }

  virtual ~Servicios_validarCredenciales_result() throw();
  bool success;

  _Servicios_validarCredenciales_result__isset __isset;

  void __set_success(const bool val);

  bool operator == (const Servicios_validarCredenciales_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    return true;
  }
  bool operator != (const Servicios_validarCredenciales_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const Servicios_validarCredenciales_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _Servicios_validarCredenciales_presult__isset {
  _Servicios_validarCredenciales_presult__isset() : success(false) {}
  bool success :1;
} _Servicios_validarCredenciales_presult__isset;

class Servicios_validarCredenciales_presult {
 public:


  virtual ~Servicios_validarCredenciales_presult() throw();
  bool* success;

  _Servicios_validarCredenciales_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

typedef struct _Servicios_registrarUsuario_args__isset {
  _Servicios_registrarUsuario_args__isset() : usuario(false) {}
  bool usuario :1;
} _Servicios_registrarUsuario_args__isset;

class Servicios_registrarUsuario_args {
 public:

  Servicios_registrarUsuario_args(const Servicios_registrarUsuario_args&);
  Servicios_registrarUsuario_args& operator=(const Servicios_registrarUsuario_args&);
  Servicios_registrarUsuario_args() {
  }

  virtual ~Servicios_registrarUsuario_args() throw();
  UsuarioClienteEscritorio usuario;

  _Servicios_registrarUsuario_args__isset __isset;

  void __set_usuario(const UsuarioClienteEscritorio& val);

  bool operator == (const Servicios_registrarUsuario_args & rhs) const
  {
    if (!(usuario == rhs.usuario))
      return false;
    return true;
  }
  bool operator != (const Servicios_registrarUsuario_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const Servicios_registrarUsuario_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class Servicios_registrarUsuario_pargs {
 public:


  virtual ~Servicios_registrarUsuario_pargs() throw();
  const UsuarioClienteEscritorio* usuario;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class Servicios_registrarUsuario_result {
 public:

  Servicios_registrarUsuario_result(const Servicios_registrarUsuario_result&);
  Servicios_registrarUsuario_result& operator=(const Servicios_registrarUsuario_result&);
  Servicios_registrarUsuario_result() {
  }

  virtual ~Servicios_registrarUsuario_result() throw();

  bool operator == (const Servicios_registrarUsuario_result & /* rhs */) const
  {
    return true;
  }
  bool operator != (const Servicios_registrarUsuario_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const Servicios_registrarUsuario_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class Servicios_registrarUsuario_presult {
 public:


  virtual ~Servicios_registrarUsuario_presult() throw();

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};


class Servicios_recuperarIncidentes_args {
 public:

  Servicios_recuperarIncidentes_args(const Servicios_recuperarIncidentes_args&);
  Servicios_recuperarIncidentes_args& operator=(const Servicios_recuperarIncidentes_args&);
  Servicios_recuperarIncidentes_args() {
  }

  virtual ~Servicios_recuperarIncidentes_args() throw();

  bool operator == (const Servicios_recuperarIncidentes_args & /* rhs */) const
  {
    return true;
  }
  bool operator != (const Servicios_recuperarIncidentes_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const Servicios_recuperarIncidentes_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class Servicios_recuperarIncidentes_pargs {
 public:


  virtual ~Servicios_recuperarIncidentes_pargs() throw();

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _Servicios_recuperarIncidentes_result__isset {
  _Servicios_recuperarIncidentes_result__isset() : success(false) {}
  bool success :1;
} _Servicios_recuperarIncidentes_result__isset;

class Servicios_recuperarIncidentes_result {
 public:

  Servicios_recuperarIncidentes_result(const Servicios_recuperarIncidentes_result&);
  Servicios_recuperarIncidentes_result& operator=(const Servicios_recuperarIncidentes_result&);
  Servicios_recuperarIncidentes_result() {
  }

  virtual ~Servicios_recuperarIncidentes_result() throw();
  std::vector<Incidente>  success;

  _Servicios_recuperarIncidentes_result__isset __isset;

  void __set_success(const std::vector<Incidente> & val);

  bool operator == (const Servicios_recuperarIncidentes_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    return true;
  }
  bool operator != (const Servicios_recuperarIncidentes_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const Servicios_recuperarIncidentes_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _Servicios_recuperarIncidentes_presult__isset {
  _Servicios_recuperarIncidentes_presult__isset() : success(false) {}
  bool success :1;
} _Servicios_recuperarIncidentes_presult__isset;

class Servicios_recuperarIncidentes_presult {
 public:


  virtual ~Servicios_recuperarIncidentes_presult() throw();
  std::vector<Incidente> * success;

  _Servicios_recuperarIncidentes_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

typedef struct _Servicios_recuperarReportes_args__isset {
  _Servicios_recuperarReportes_args__isset() : idIncidente(false) {}
  bool idIncidente :1;
} _Servicios_recuperarReportes_args__isset;

class Servicios_recuperarReportes_args {
 public:

  Servicios_recuperarReportes_args(const Servicios_recuperarReportes_args&);
  Servicios_recuperarReportes_args& operator=(const Servicios_recuperarReportes_args&);
  Servicios_recuperarReportes_args() : idIncidente(0) {
  }

  virtual ~Servicios_recuperarReportes_args() throw();
  int32_t idIncidente;

  _Servicios_recuperarReportes_args__isset __isset;

  void __set_idIncidente(const int32_t val);

  bool operator == (const Servicios_recuperarReportes_args & rhs) const
  {
    if (!(idIncidente == rhs.idIncidente))
      return false;
    return true;
  }
  bool operator != (const Servicios_recuperarReportes_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const Servicios_recuperarReportes_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class Servicios_recuperarReportes_pargs {
 public:


  virtual ~Servicios_recuperarReportes_pargs() throw();
  const int32_t* idIncidente;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _Servicios_recuperarReportes_result__isset {
  _Servicios_recuperarReportes_result__isset() : success(false) {}
  bool success :1;
} _Servicios_recuperarReportes_result__isset;

class Servicios_recuperarReportes_result {
 public:

  Servicios_recuperarReportes_result(const Servicios_recuperarReportes_result&);
  Servicios_recuperarReportes_result& operator=(const Servicios_recuperarReportes_result&);
  Servicios_recuperarReportes_result() {
  }

  virtual ~Servicios_recuperarReportes_result() throw();
  std::vector<Reporte>  success;

  _Servicios_recuperarReportes_result__isset __isset;

  void __set_success(const std::vector<Reporte> & val);

  bool operator == (const Servicios_recuperarReportes_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    return true;
  }
  bool operator != (const Servicios_recuperarReportes_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const Servicios_recuperarReportes_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _Servicios_recuperarReportes_presult__isset {
  _Servicios_recuperarReportes_presult__isset() : success(false) {}
  bool success :1;
} _Servicios_recuperarReportes_presult__isset;

class Servicios_recuperarReportes_presult {
 public:


  virtual ~Servicios_recuperarReportes_presult() throw();
  std::vector<Reporte> * success;

  _Servicios_recuperarReportes_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

typedef struct _Servicios_recuperarVehiculoInvolucrado_args__isset {
  _Servicios_recuperarVehiculoInvolucrado_args__isset() : idVehiculo(false) {}
  bool idVehiculo :1;
} _Servicios_recuperarVehiculoInvolucrado_args__isset;

class Servicios_recuperarVehiculoInvolucrado_args {
 public:

  Servicios_recuperarVehiculoInvolucrado_args(const Servicios_recuperarVehiculoInvolucrado_args&);
  Servicios_recuperarVehiculoInvolucrado_args& operator=(const Servicios_recuperarVehiculoInvolucrado_args&);
  Servicios_recuperarVehiculoInvolucrado_args() : idVehiculo(0) {
  }

  virtual ~Servicios_recuperarVehiculoInvolucrado_args() throw();
  int32_t idVehiculo;

  _Servicios_recuperarVehiculoInvolucrado_args__isset __isset;

  void __set_idVehiculo(const int32_t val);

  bool operator == (const Servicios_recuperarVehiculoInvolucrado_args & rhs) const
  {
    if (!(idVehiculo == rhs.idVehiculo))
      return false;
    return true;
  }
  bool operator != (const Servicios_recuperarVehiculoInvolucrado_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const Servicios_recuperarVehiculoInvolucrado_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class Servicios_recuperarVehiculoInvolucrado_pargs {
 public:


  virtual ~Servicios_recuperarVehiculoInvolucrado_pargs() throw();
  const int32_t* idVehiculo;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _Servicios_recuperarVehiculoInvolucrado_result__isset {
  _Servicios_recuperarVehiculoInvolucrado_result__isset() : success(false) {}
  bool success :1;
} _Servicios_recuperarVehiculoInvolucrado_result__isset;

class Servicios_recuperarVehiculoInvolucrado_result {
 public:

  Servicios_recuperarVehiculoInvolucrado_result(const Servicios_recuperarVehiculoInvolucrado_result&);
  Servicios_recuperarVehiculoInvolucrado_result& operator=(const Servicios_recuperarVehiculoInvolucrado_result&);
  Servicios_recuperarVehiculoInvolucrado_result() {
  }

  virtual ~Servicios_recuperarVehiculoInvolucrado_result() throw();
  Vehiculo success;

  _Servicios_recuperarVehiculoInvolucrado_result__isset __isset;

  void __set_success(const Vehiculo& val);

  bool operator == (const Servicios_recuperarVehiculoInvolucrado_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    return true;
  }
  bool operator != (const Servicios_recuperarVehiculoInvolucrado_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const Servicios_recuperarVehiculoInvolucrado_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _Servicios_recuperarVehiculoInvolucrado_presult__isset {
  _Servicios_recuperarVehiculoInvolucrado_presult__isset() : success(false) {}
  bool success :1;
} _Servicios_recuperarVehiculoInvolucrado_presult__isset;

class Servicios_recuperarVehiculoInvolucrado_presult {
 public:


  virtual ~Servicios_recuperarVehiculoInvolucrado_presult() throw();
  Vehiculo* success;

  _Servicios_recuperarVehiculoInvolucrado_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

typedef struct _Servicios_recuperarConductorInvolucrado_args__isset {
  _Servicios_recuperarConductorInvolucrado_args__isset() : idConductor(false) {}
  bool idConductor :1;
} _Servicios_recuperarConductorInvolucrado_args__isset;

class Servicios_recuperarConductorInvolucrado_args {
 public:

  Servicios_recuperarConductorInvolucrado_args(const Servicios_recuperarConductorInvolucrado_args&);
  Servicios_recuperarConductorInvolucrado_args& operator=(const Servicios_recuperarConductorInvolucrado_args&);
  Servicios_recuperarConductorInvolucrado_args() : idConductor(0) {
  }

  virtual ~Servicios_recuperarConductorInvolucrado_args() throw();
  int32_t idConductor;

  _Servicios_recuperarConductorInvolucrado_args__isset __isset;

  void __set_idConductor(const int32_t val);

  bool operator == (const Servicios_recuperarConductorInvolucrado_args & rhs) const
  {
    if (!(idConductor == rhs.idConductor))
      return false;
    return true;
  }
  bool operator != (const Servicios_recuperarConductorInvolucrado_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const Servicios_recuperarConductorInvolucrado_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class Servicios_recuperarConductorInvolucrado_pargs {
 public:


  virtual ~Servicios_recuperarConductorInvolucrado_pargs() throw();
  const int32_t* idConductor;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _Servicios_recuperarConductorInvolucrado_result__isset {
  _Servicios_recuperarConductorInvolucrado_result__isset() : success(false) {}
  bool success :1;
} _Servicios_recuperarConductorInvolucrado_result__isset;

class Servicios_recuperarConductorInvolucrado_result {
 public:

  Servicios_recuperarConductorInvolucrado_result(const Servicios_recuperarConductorInvolucrado_result&);
  Servicios_recuperarConductorInvolucrado_result& operator=(const Servicios_recuperarConductorInvolucrado_result&);
  Servicios_recuperarConductorInvolucrado_result() {
  }

  virtual ~Servicios_recuperarConductorInvolucrado_result() throw();
  Conductor success;

  _Servicios_recuperarConductorInvolucrado_result__isset __isset;

  void __set_success(const Conductor& val);

  bool operator == (const Servicios_recuperarConductorInvolucrado_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    return true;
  }
  bool operator != (const Servicios_recuperarConductorInvolucrado_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const Servicios_recuperarConductorInvolucrado_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _Servicios_recuperarConductorInvolucrado_presult__isset {
  _Servicios_recuperarConductorInvolucrado_presult__isset() : success(false) {}
  bool success :1;
} _Servicios_recuperarConductorInvolucrado_presult__isset;

class Servicios_recuperarConductorInvolucrado_presult {
 public:


  virtual ~Servicios_recuperarConductorInvolucrado_presult() throw();
  Conductor* success;

  _Servicios_recuperarConductorInvolucrado_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

typedef struct _Servicios_recuperarFotosReportadas_args__isset {
  _Servicios_recuperarFotosReportadas_args__isset() : idReporte(false) {}
  bool idReporte :1;
} _Servicios_recuperarFotosReportadas_args__isset;

class Servicios_recuperarFotosReportadas_args {
 public:

  Servicios_recuperarFotosReportadas_args(const Servicios_recuperarFotosReportadas_args&);
  Servicios_recuperarFotosReportadas_args& operator=(const Servicios_recuperarFotosReportadas_args&);
  Servicios_recuperarFotosReportadas_args() : idReporte(0) {
  }

  virtual ~Servicios_recuperarFotosReportadas_args() throw();
  int32_t idReporte;

  _Servicios_recuperarFotosReportadas_args__isset __isset;

  void __set_idReporte(const int32_t val);

  bool operator == (const Servicios_recuperarFotosReportadas_args & rhs) const
  {
    if (!(idReporte == rhs.idReporte))
      return false;
    return true;
  }
  bool operator != (const Servicios_recuperarFotosReportadas_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const Servicios_recuperarFotosReportadas_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class Servicios_recuperarFotosReportadas_pargs {
 public:


  virtual ~Servicios_recuperarFotosReportadas_pargs() throw();
  const int32_t* idReporte;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _Servicios_recuperarFotosReportadas_result__isset {
  _Servicios_recuperarFotosReportadas_result__isset() : success(false) {}
  bool success :1;
} _Servicios_recuperarFotosReportadas_result__isset;

class Servicios_recuperarFotosReportadas_result {
 public:

  Servicios_recuperarFotosReportadas_result(const Servicios_recuperarFotosReportadas_result&);
  Servicios_recuperarFotosReportadas_result& operator=(const Servicios_recuperarFotosReportadas_result&);
  Servicios_recuperarFotosReportadas_result() {
  }

  virtual ~Servicios_recuperarFotosReportadas_result() throw();
  std::vector<Foto>  success;

  _Servicios_recuperarFotosReportadas_result__isset __isset;

  void __set_success(const std::vector<Foto> & val);

  bool operator == (const Servicios_recuperarFotosReportadas_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    return true;
  }
  bool operator != (const Servicios_recuperarFotosReportadas_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const Servicios_recuperarFotosReportadas_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _Servicios_recuperarFotosReportadas_presult__isset {
  _Servicios_recuperarFotosReportadas_presult__isset() : success(false) {}
  bool success :1;
} _Servicios_recuperarFotosReportadas_presult__isset;

class Servicios_recuperarFotosReportadas_presult {
 public:


  virtual ~Servicios_recuperarFotosReportadas_presult() throw();
  std::vector<Foto> * success;

  _Servicios_recuperarFotosReportadas_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

typedef struct _Servicios_dictaminarIncidente_args__isset {
  _Servicios_dictaminarIncidente_args__isset() : dic(false) {}
  bool dic :1;
} _Servicios_dictaminarIncidente_args__isset;

class Servicios_dictaminarIncidente_args {
 public:

  Servicios_dictaminarIncidente_args(const Servicios_dictaminarIncidente_args&);
  Servicios_dictaminarIncidente_args& operator=(const Servicios_dictaminarIncidente_args&);
  Servicios_dictaminarIncidente_args() {
  }

  virtual ~Servicios_dictaminarIncidente_args() throw();
  Dictamen dic;

  _Servicios_dictaminarIncidente_args__isset __isset;

  void __set_dic(const Dictamen& val);

  bool operator == (const Servicios_dictaminarIncidente_args & rhs) const
  {
    if (!(dic == rhs.dic))
      return false;
    return true;
  }
  bool operator != (const Servicios_dictaminarIncidente_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const Servicios_dictaminarIncidente_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class Servicios_dictaminarIncidente_pargs {
 public:


  virtual ~Servicios_dictaminarIncidente_pargs() throw();
  const Dictamen* dic;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class Servicios_dictaminarIncidente_result {
 public:

  Servicios_dictaminarIncidente_result(const Servicios_dictaminarIncidente_result&);
  Servicios_dictaminarIncidente_result& operator=(const Servicios_dictaminarIncidente_result&);
  Servicios_dictaminarIncidente_result() {
  }

  virtual ~Servicios_dictaminarIncidente_result() throw();

  bool operator == (const Servicios_dictaminarIncidente_result & /* rhs */) const
  {
    return true;
  }
  bool operator != (const Servicios_dictaminarIncidente_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const Servicios_dictaminarIncidente_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class Servicios_dictaminarIncidente_presult {
 public:


  virtual ~Servicios_dictaminarIncidente_presult() throw();

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

typedef struct _Servicios_validarUsuario_args__isset {
  _Servicios_validarUsuario_args__isset() : usuario(false) {}
  bool usuario :1;
} _Servicios_validarUsuario_args__isset;

class Servicios_validarUsuario_args {
 public:

  Servicios_validarUsuario_args(const Servicios_validarUsuario_args&);
  Servicios_validarUsuario_args& operator=(const Servicios_validarUsuario_args&);
  Servicios_validarUsuario_args() : usuario() {
  }

  virtual ~Servicios_validarUsuario_args() throw();
  std::string usuario;

  _Servicios_validarUsuario_args__isset __isset;

  void __set_usuario(const std::string& val);

  bool operator == (const Servicios_validarUsuario_args & rhs) const
  {
    if (!(usuario == rhs.usuario))
      return false;
    return true;
  }
  bool operator != (const Servicios_validarUsuario_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const Servicios_validarUsuario_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class Servicios_validarUsuario_pargs {
 public:


  virtual ~Servicios_validarUsuario_pargs() throw();
  const std::string* usuario;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _Servicios_validarUsuario_result__isset {
  _Servicios_validarUsuario_result__isset() : success(false) {}
  bool success :1;
} _Servicios_validarUsuario_result__isset;

class Servicios_validarUsuario_result {
 public:

  Servicios_validarUsuario_result(const Servicios_validarUsuario_result&);
  Servicios_validarUsuario_result& operator=(const Servicios_validarUsuario_result&);
  Servicios_validarUsuario_result() : success(0) {
  }

  virtual ~Servicios_validarUsuario_result() throw();
  bool success;

  _Servicios_validarUsuario_result__isset __isset;

  void __set_success(const bool val);

  bool operator == (const Servicios_validarUsuario_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    return true;
  }
  bool operator != (const Servicios_validarUsuario_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const Servicios_validarUsuario_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _Servicios_validarUsuario_presult__isset {
  _Servicios_validarUsuario_presult__isset() : success(false) {}
  bool success :1;
} _Servicios_validarUsuario_presult__isset;

class Servicios_validarUsuario_presult {
 public:


  virtual ~Servicios_validarUsuario_presult() throw();
  bool* success;

  _Servicios_validarUsuario_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

typedef struct _Servicios_validarFolio_args__isset {
  _Servicios_validarFolio_args__isset() : folio(false) {}
  bool folio :1;
} _Servicios_validarFolio_args__isset;

class Servicios_validarFolio_args {
 public:

  Servicios_validarFolio_args(const Servicios_validarFolio_args&);
  Servicios_validarFolio_args& operator=(const Servicios_validarFolio_args&);
  Servicios_validarFolio_args() : folio() {
  }

  virtual ~Servicios_validarFolio_args() throw();
  std::string folio;

  _Servicios_validarFolio_args__isset __isset;

  void __set_folio(const std::string& val);

  bool operator == (const Servicios_validarFolio_args & rhs) const
  {
    if (!(folio == rhs.folio))
      return false;
    return true;
  }
  bool operator != (const Servicios_validarFolio_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const Servicios_validarFolio_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class Servicios_validarFolio_pargs {
 public:


  virtual ~Servicios_validarFolio_pargs() throw();
  const std::string* folio;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _Servicios_validarFolio_result__isset {
  _Servicios_validarFolio_result__isset() : success(false) {}
  bool success :1;
} _Servicios_validarFolio_result__isset;

class Servicios_validarFolio_result {
 public:

  Servicios_validarFolio_result(const Servicios_validarFolio_result&);
  Servicios_validarFolio_result& operator=(const Servicios_validarFolio_result&);
  Servicios_validarFolio_result() : success(0) {
  }

  virtual ~Servicios_validarFolio_result() throw();
  bool success;

  _Servicios_validarFolio_result__isset __isset;

  void __set_success(const bool val);

  bool operator == (const Servicios_validarFolio_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    return true;
  }
  bool operator != (const Servicios_validarFolio_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const Servicios_validarFolio_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _Servicios_validarFolio_presult__isset {
  _Servicios_validarFolio_presult__isset() : success(false) {}
  bool success :1;
} _Servicios_validarFolio_presult__isset;

class Servicios_validarFolio_presult {
 public:


  virtual ~Servicios_validarFolio_presult() throw();
  bool* success;

  _Servicios_validarFolio_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

typedef struct _Servicios_recuperarUsuario_args__isset {
  _Servicios_recuperarUsuario_args__isset() : usuario(false) {}
  bool usuario :1;
} _Servicios_recuperarUsuario_args__isset;

class Servicios_recuperarUsuario_args {
 public:

  Servicios_recuperarUsuario_args(const Servicios_recuperarUsuario_args&);
  Servicios_recuperarUsuario_args& operator=(const Servicios_recuperarUsuario_args&);
  Servicios_recuperarUsuario_args() : usuario() {
  }

  virtual ~Servicios_recuperarUsuario_args() throw();
  std::string usuario;

  _Servicios_recuperarUsuario_args__isset __isset;

  void __set_usuario(const std::string& val);

  bool operator == (const Servicios_recuperarUsuario_args & rhs) const
  {
    if (!(usuario == rhs.usuario))
      return false;
    return true;
  }
  bool operator != (const Servicios_recuperarUsuario_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const Servicios_recuperarUsuario_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class Servicios_recuperarUsuario_pargs {
 public:


  virtual ~Servicios_recuperarUsuario_pargs() throw();
  const std::string* usuario;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _Servicios_recuperarUsuario_result__isset {
  _Servicios_recuperarUsuario_result__isset() : success(false) {}
  bool success :1;
} _Servicios_recuperarUsuario_result__isset;

class Servicios_recuperarUsuario_result {
 public:

  Servicios_recuperarUsuario_result(const Servicios_recuperarUsuario_result&);
  Servicios_recuperarUsuario_result& operator=(const Servicios_recuperarUsuario_result&);
  Servicios_recuperarUsuario_result() {
  }

  virtual ~Servicios_recuperarUsuario_result() throw();
  UsuarioClienteEscritorio success;

  _Servicios_recuperarUsuario_result__isset __isset;

  void __set_success(const UsuarioClienteEscritorio& val);

  bool operator == (const Servicios_recuperarUsuario_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    return true;
  }
  bool operator != (const Servicios_recuperarUsuario_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const Servicios_recuperarUsuario_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _Servicios_recuperarUsuario_presult__isset {
  _Servicios_recuperarUsuario_presult__isset() : success(false) {}
  bool success :1;
} _Servicios_recuperarUsuario_presult__isset;

class Servicios_recuperarUsuario_presult {
 public:


  virtual ~Servicios_recuperarUsuario_presult() throw();
  UsuarioClienteEscritorio* success;

  _Servicios_recuperarUsuario_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

typedef struct _Servicios_actualizarContrasena_args__isset {
  _Servicios_actualizarContrasena_args__isset() : idUsuario(false), contrasena(false) {}
  bool idUsuario :1;
  bool contrasena :1;
} _Servicios_actualizarContrasena_args__isset;

class Servicios_actualizarContrasena_args {
 public:

  Servicios_actualizarContrasena_args(const Servicios_actualizarContrasena_args&);
  Servicios_actualizarContrasena_args& operator=(const Servicios_actualizarContrasena_args&);
  Servicios_actualizarContrasena_args() : idUsuario(0), contrasena() {
  }

  virtual ~Servicios_actualizarContrasena_args() throw();
  int32_t idUsuario;
  std::string contrasena;

  _Servicios_actualizarContrasena_args__isset __isset;

  void __set_idUsuario(const int32_t val);

  void __set_contrasena(const std::string& val);

  bool operator == (const Servicios_actualizarContrasena_args & rhs) const
  {
    if (!(idUsuario == rhs.idUsuario))
      return false;
    if (!(contrasena == rhs.contrasena))
      return false;
    return true;
  }
  bool operator != (const Servicios_actualizarContrasena_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const Servicios_actualizarContrasena_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class Servicios_actualizarContrasena_pargs {
 public:


  virtual ~Servicios_actualizarContrasena_pargs() throw();
  const int32_t* idUsuario;
  const std::string* contrasena;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class Servicios_actualizarContrasena_result {
 public:

  Servicios_actualizarContrasena_result(const Servicios_actualizarContrasena_result&);
  Servicios_actualizarContrasena_result& operator=(const Servicios_actualizarContrasena_result&);
  Servicios_actualizarContrasena_result() {
  }

  virtual ~Servicios_actualizarContrasena_result() throw();

  bool operator == (const Servicios_actualizarContrasena_result & /* rhs */) const
  {
    return true;
  }
  bool operator != (const Servicios_actualizarContrasena_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const Servicios_actualizarContrasena_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class Servicios_actualizarContrasena_presult {
 public:


  virtual ~Servicios_actualizarContrasena_presult() throw();

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

class ServiciosClient : virtual public ServiciosIf {
 public:
  ServiciosClient(apache::thrift::stdcxx::shared_ptr< ::apache::thrift::protocol::TProtocol> prot) {
    setProtocol(prot);
  }
  ServiciosClient(apache::thrift::stdcxx::shared_ptr< ::apache::thrift::protocol::TProtocol> iprot, apache::thrift::stdcxx::shared_ptr< ::apache::thrift::protocol::TProtocol> oprot) {
    setProtocol(iprot,oprot);
  }
 private:
  void setProtocol(apache::thrift::stdcxx::shared_ptr< ::apache::thrift::protocol::TProtocol> prot) {
  setProtocol(prot,prot);
  }
  void setProtocol(apache::thrift::stdcxx::shared_ptr< ::apache::thrift::protocol::TProtocol> iprot, apache::thrift::stdcxx::shared_ptr< ::apache::thrift::protocol::TProtocol> oprot) {
    piprot_=iprot;
    poprot_=oprot;
    iprot_ = iprot.get();
    oprot_ = oprot.get();
  }
 public:
  apache::thrift::stdcxx::shared_ptr< ::apache::thrift::protocol::TProtocol> getInputProtocol() {
    return piprot_;
  }
  apache::thrift::stdcxx::shared_ptr< ::apache::thrift::protocol::TProtocol> getOutputProtocol() {
    return poprot_;
  }
  bool validarCredenciales(const std::string& usuario, const std::string& contrasena);
  void send_validarCredenciales(const std::string& usuario, const std::string& contrasena);
  bool recv_validarCredenciales();
  void registrarUsuario(const UsuarioClienteEscritorio& usuario);
  void send_registrarUsuario(const UsuarioClienteEscritorio& usuario);
  void recv_registrarUsuario();
  void recuperarIncidentes(std::vector<Incidente> & _return);
  void send_recuperarIncidentes();
  void recv_recuperarIncidentes(std::vector<Incidente> & _return);
  void recuperarReportes(std::vector<Reporte> & _return, const int32_t idIncidente);
  void send_recuperarReportes(const int32_t idIncidente);
  void recv_recuperarReportes(std::vector<Reporte> & _return);
  void recuperarVehiculoInvolucrado(Vehiculo& _return, const int32_t idVehiculo);
  void send_recuperarVehiculoInvolucrado(const int32_t idVehiculo);
  void recv_recuperarVehiculoInvolucrado(Vehiculo& _return);
  void recuperarConductorInvolucrado(Conductor& _return, const int32_t idConductor);
  void send_recuperarConductorInvolucrado(const int32_t idConductor);
  void recv_recuperarConductorInvolucrado(Conductor& _return);
  void recuperarFotosReportadas(std::vector<Foto> & _return, const int32_t idReporte);
  void send_recuperarFotosReportadas(const int32_t idReporte);
  void recv_recuperarFotosReportadas(std::vector<Foto> & _return);
  void dictaminarIncidente(const Dictamen& dic);
  void send_dictaminarIncidente(const Dictamen& dic);
  void recv_dictaminarIncidente();
  bool validarUsuario(const std::string& usuario);
  void send_validarUsuario(const std::string& usuario);
  bool recv_validarUsuario();
  bool validarFolio(const std::string& folio);
  void send_validarFolio(const std::string& folio);
  bool recv_validarFolio();
  void recuperarUsuario(UsuarioClienteEscritorio& _return, const std::string& usuario);
  void send_recuperarUsuario(const std::string& usuario);
  void recv_recuperarUsuario(UsuarioClienteEscritorio& _return);
  void actualizarContrasena(const int32_t idUsuario, const std::string& contrasena);
  void send_actualizarContrasena(const int32_t idUsuario, const std::string& contrasena);
  void recv_actualizarContrasena();
 protected:
  apache::thrift::stdcxx::shared_ptr< ::apache::thrift::protocol::TProtocol> piprot_;
  apache::thrift::stdcxx::shared_ptr< ::apache::thrift::protocol::TProtocol> poprot_;
  ::apache::thrift::protocol::TProtocol* iprot_;
  ::apache::thrift::protocol::TProtocol* oprot_;
};

class ServiciosProcessor : public ::apache::thrift::TDispatchProcessor {
 protected:
  ::apache::thrift::stdcxx::shared_ptr<ServiciosIf> iface_;
  virtual bool dispatchCall(::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, const std::string& fname, int32_t seqid, void* callContext);
 private:
  typedef  void (ServiciosProcessor::*ProcessFunction)(int32_t, ::apache::thrift::protocol::TProtocol*, ::apache::thrift::protocol::TProtocol*, void*);
  typedef std::map<std::string, ProcessFunction> ProcessMap;
  ProcessMap processMap_;
  void process_validarCredenciales(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_registrarUsuario(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_recuperarIncidentes(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_recuperarReportes(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_recuperarVehiculoInvolucrado(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_recuperarConductorInvolucrado(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_recuperarFotosReportadas(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_dictaminarIncidente(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_validarUsuario(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_validarFolio(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_recuperarUsuario(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_actualizarContrasena(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
 public:
  ServiciosProcessor(::apache::thrift::stdcxx::shared_ptr<ServiciosIf> iface) :
    iface_(iface) {
    processMap_["validarCredenciales"] = &ServiciosProcessor::process_validarCredenciales;
    processMap_["registrarUsuario"] = &ServiciosProcessor::process_registrarUsuario;
    processMap_["recuperarIncidentes"] = &ServiciosProcessor::process_recuperarIncidentes;
    processMap_["recuperarReportes"] = &ServiciosProcessor::process_recuperarReportes;
    processMap_["recuperarVehiculoInvolucrado"] = &ServiciosProcessor::process_recuperarVehiculoInvolucrado;
    processMap_["recuperarConductorInvolucrado"] = &ServiciosProcessor::process_recuperarConductorInvolucrado;
    processMap_["recuperarFotosReportadas"] = &ServiciosProcessor::process_recuperarFotosReportadas;
    processMap_["dictaminarIncidente"] = &ServiciosProcessor::process_dictaminarIncidente;
    processMap_["validarUsuario"] = &ServiciosProcessor::process_validarUsuario;
    processMap_["validarFolio"] = &ServiciosProcessor::process_validarFolio;
    processMap_["recuperarUsuario"] = &ServiciosProcessor::process_recuperarUsuario;
    processMap_["actualizarContrasena"] = &ServiciosProcessor::process_actualizarContrasena;
  }

  virtual ~ServiciosProcessor() {}
};

class ServiciosProcessorFactory : public ::apache::thrift::TProcessorFactory {
 public:
  ServiciosProcessorFactory(const ::apache::thrift::stdcxx::shared_ptr< ServiciosIfFactory >& handlerFactory) :
      handlerFactory_(handlerFactory) {}

  ::apache::thrift::stdcxx::shared_ptr< ::apache::thrift::TProcessor > getProcessor(const ::apache::thrift::TConnectionInfo& connInfo);

 protected:
  ::apache::thrift::stdcxx::shared_ptr< ServiciosIfFactory > handlerFactory_;
};

class ServiciosMultiface : virtual public ServiciosIf {
 public:
  ServiciosMultiface(std::vector<apache::thrift::stdcxx::shared_ptr<ServiciosIf> >& ifaces) : ifaces_(ifaces) {
  }
  virtual ~ServiciosMultiface() {}
 protected:
  std::vector<apache::thrift::stdcxx::shared_ptr<ServiciosIf> > ifaces_;
  ServiciosMultiface() {}
  void add(::apache::thrift::stdcxx::shared_ptr<ServiciosIf> iface) {
    ifaces_.push_back(iface);
  }
 public:
  bool validarCredenciales(const std::string& usuario, const std::string& contrasena) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->validarCredenciales(usuario, contrasena);
    }
    return ifaces_[i]->validarCredenciales(usuario, contrasena);
  }

  void registrarUsuario(const UsuarioClienteEscritorio& usuario) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->registrarUsuario(usuario);
    }
    ifaces_[i]->registrarUsuario(usuario);
  }

  void recuperarIncidentes(std::vector<Incidente> & _return) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->recuperarIncidentes(_return);
    }
    ifaces_[i]->recuperarIncidentes(_return);
    return;
  }

  void recuperarReportes(std::vector<Reporte> & _return, const int32_t idIncidente) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->recuperarReportes(_return, idIncidente);
    }
    ifaces_[i]->recuperarReportes(_return, idIncidente);
    return;
  }

  void recuperarVehiculoInvolucrado(Vehiculo& _return, const int32_t idVehiculo) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->recuperarVehiculoInvolucrado(_return, idVehiculo);
    }
    ifaces_[i]->recuperarVehiculoInvolucrado(_return, idVehiculo);
    return;
  }

  void recuperarConductorInvolucrado(Conductor& _return, const int32_t idConductor) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->recuperarConductorInvolucrado(_return, idConductor);
    }
    ifaces_[i]->recuperarConductorInvolucrado(_return, idConductor);
    return;
  }

  void recuperarFotosReportadas(std::vector<Foto> & _return, const int32_t idReporte) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->recuperarFotosReportadas(_return, idReporte);
    }
    ifaces_[i]->recuperarFotosReportadas(_return, idReporte);
    return;
  }

  void dictaminarIncidente(const Dictamen& dic) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->dictaminarIncidente(dic);
    }
    ifaces_[i]->dictaminarIncidente(dic);
  }

  bool validarUsuario(const std::string& usuario) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->validarUsuario(usuario);
    }
    return ifaces_[i]->validarUsuario(usuario);
  }

  bool validarFolio(const std::string& folio) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->validarFolio(folio);
    }
    return ifaces_[i]->validarFolio(folio);
  }

  void recuperarUsuario(UsuarioClienteEscritorio& _return, const std::string& usuario) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->recuperarUsuario(_return, usuario);
    }
    ifaces_[i]->recuperarUsuario(_return, usuario);
    return;
  }

  void actualizarContrasena(const int32_t idUsuario, const std::string& contrasena) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->actualizarContrasena(idUsuario, contrasena);
    }
    ifaces_[i]->actualizarContrasena(idUsuario, contrasena);
  }

};

// The 'concurrent' client is a thread safe client that correctly handles
// out of order responses.  It is slower than the regular client, so should
// only be used when you need to share a connection among multiple threads
class ServiciosConcurrentClient : virtual public ServiciosIf {
 public:
  ServiciosConcurrentClient(apache::thrift::stdcxx::shared_ptr< ::apache::thrift::protocol::TProtocol> prot) {
    setProtocol(prot);
  }
  ServiciosConcurrentClient(apache::thrift::stdcxx::shared_ptr< ::apache::thrift::protocol::TProtocol> iprot, apache::thrift::stdcxx::shared_ptr< ::apache::thrift::protocol::TProtocol> oprot) {
    setProtocol(iprot,oprot);
  }
 private:
  void setProtocol(apache::thrift::stdcxx::shared_ptr< ::apache::thrift::protocol::TProtocol> prot) {
  setProtocol(prot,prot);
  }
  void setProtocol(apache::thrift::stdcxx::shared_ptr< ::apache::thrift::protocol::TProtocol> iprot, apache::thrift::stdcxx::shared_ptr< ::apache::thrift::protocol::TProtocol> oprot) {
    piprot_=iprot;
    poprot_=oprot;
    iprot_ = iprot.get();
    oprot_ = oprot.get();
  }
 public:
  apache::thrift::stdcxx::shared_ptr< ::apache::thrift::protocol::TProtocol> getInputProtocol() {
    return piprot_;
  }
  apache::thrift::stdcxx::shared_ptr< ::apache::thrift::protocol::TProtocol> getOutputProtocol() {
    return poprot_;
  }
  bool validarCredenciales(const std::string& usuario, const std::string& contrasena);
  int32_t send_validarCredenciales(const std::string& usuario, const std::string& contrasena);
  bool recv_validarCredenciales(const int32_t seqid);
  void registrarUsuario(const UsuarioClienteEscritorio& usuario);
  int32_t send_registrarUsuario(const UsuarioClienteEscritorio& usuario);
  void recv_registrarUsuario(const int32_t seqid);
  void recuperarIncidentes(std::vector<Incidente> & _return);
  int32_t send_recuperarIncidentes();
  void recv_recuperarIncidentes(std::vector<Incidente> & _return, const int32_t seqid);
  void recuperarReportes(std::vector<Reporte> & _return, const int32_t idIncidente);
  int32_t send_recuperarReportes(const int32_t idIncidente);
  void recv_recuperarReportes(std::vector<Reporte> & _return, const int32_t seqid);
  void recuperarVehiculoInvolucrado(Vehiculo& _return, const int32_t idVehiculo);
  int32_t send_recuperarVehiculoInvolucrado(const int32_t idVehiculo);
  void recv_recuperarVehiculoInvolucrado(Vehiculo& _return, const int32_t seqid);
  void recuperarConductorInvolucrado(Conductor& _return, const int32_t idConductor);
  int32_t send_recuperarConductorInvolucrado(const int32_t idConductor);
  void recv_recuperarConductorInvolucrado(Conductor& _return, const int32_t seqid);
  void recuperarFotosReportadas(std::vector<Foto> & _return, const int32_t idReporte);
  int32_t send_recuperarFotosReportadas(const int32_t idReporte);
  void recv_recuperarFotosReportadas(std::vector<Foto> & _return, const int32_t seqid);
  void dictaminarIncidente(const Dictamen& dic);
  int32_t send_dictaminarIncidente(const Dictamen& dic);
  void recv_dictaminarIncidente(const int32_t seqid);
  bool validarUsuario(const std::string& usuario);
  int32_t send_validarUsuario(const std::string& usuario);
  bool recv_validarUsuario(const int32_t seqid);
  bool validarFolio(const std::string& folio);
  int32_t send_validarFolio(const std::string& folio);
  bool recv_validarFolio(const int32_t seqid);
  void recuperarUsuario(UsuarioClienteEscritorio& _return, const std::string& usuario);
  int32_t send_recuperarUsuario(const std::string& usuario);
  void recv_recuperarUsuario(UsuarioClienteEscritorio& _return, const int32_t seqid);
  void actualizarContrasena(const int32_t idUsuario, const std::string& contrasena);
  int32_t send_actualizarContrasena(const int32_t idUsuario, const std::string& contrasena);
  void recv_actualizarContrasena(const int32_t seqid);
 protected:
  apache::thrift::stdcxx::shared_ptr< ::apache::thrift::protocol::TProtocol> piprot_;
  apache::thrift::stdcxx::shared_ptr< ::apache::thrift::protocol::TProtocol> poprot_;
  ::apache::thrift::protocol::TProtocol* iprot_;
  ::apache::thrift::protocol::TProtocol* oprot_;
  ::apache::thrift::async::TConcurrentClientSyncInfo sync_;
};

#ifdef _MSC_VER
  #pragma warning( pop )
#endif

} // namespace

#endif
