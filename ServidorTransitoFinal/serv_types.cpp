/**
 * Autogenerated by Thrift Compiler (0.12.0)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
#include "serv_types.h"

#include <algorithm>
#include <ostream>

#include <thrift/TToString.h>

namespace Thrift {


UsuarioClienteEscritorio::~UsuarioClienteEscritorio() throw() {
}


void UsuarioClienteEscritorio::__set_idUsuario(const int32_t val) {
  this->idUsuario = val;
}

void UsuarioClienteEscritorio::__set_nombre(const std::string& val) {
  this->nombre = val;
}

void UsuarioClienteEscritorio::__set_cargo(const std::string& val) {
  this->cargo = val;
}

void UsuarioClienteEscritorio::__set_usuario(const std::string& val) {
  this->usuario = val;
}

void UsuarioClienteEscritorio::__set_contrasena(const std::string& val) {
  this->contrasena = val;
}

void UsuarioClienteEscritorio::__set_token(const std::string& val) {
  this->token = val;
}
std::ostream& operator<<(std::ostream& out, const UsuarioClienteEscritorio& obj)
{
  obj.printTo(out);
  return out;
}


uint32_t UsuarioClienteEscritorio::read(::apache::thrift::protocol::TProtocol* iprot) {

  ::apache::thrift::protocol::TInputRecursionTracker tracker(*iprot);
  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;


  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          xfer += iprot->readI32(this->idUsuario);
          this->__isset.idUsuario = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 2:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->nombre);
          this->__isset.nombre = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 3:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->cargo);
          this->__isset.cargo = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 4:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->usuario);
          this->__isset.usuario = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 5:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->contrasena);
          this->__isset.contrasena = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 6:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->token);
          this->__isset.token = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  return xfer;
}

uint32_t UsuarioClienteEscritorio::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  ::apache::thrift::protocol::TOutputRecursionTracker tracker(*oprot);
  xfer += oprot->writeStructBegin("UsuarioClienteEscritorio");

  xfer += oprot->writeFieldBegin("idUsuario", ::apache::thrift::protocol::T_I32, 1);
  xfer += oprot->writeI32(this->idUsuario);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("nombre", ::apache::thrift::protocol::T_STRING, 2);
  xfer += oprot->writeString(this->nombre);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("cargo", ::apache::thrift::protocol::T_STRING, 3);
  xfer += oprot->writeString(this->cargo);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("usuario", ::apache::thrift::protocol::T_STRING, 4);
  xfer += oprot->writeString(this->usuario);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("contrasena", ::apache::thrift::protocol::T_STRING, 5);
  xfer += oprot->writeString(this->contrasena);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("token", ::apache::thrift::protocol::T_STRING, 6);
  xfer += oprot->writeString(this->token);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  return xfer;
}

void swap(UsuarioClienteEscritorio &a, UsuarioClienteEscritorio &b) {
  using ::std::swap;
  swap(a.idUsuario, b.idUsuario);
  swap(a.nombre, b.nombre);
  swap(a.cargo, b.cargo);
  swap(a.usuario, b.usuario);
  swap(a.contrasena, b.contrasena);
  swap(a.token, b.token);
  swap(a.__isset, b.__isset);
}

UsuarioClienteEscritorio::UsuarioClienteEscritorio(const UsuarioClienteEscritorio& other0) {
  idUsuario = other0.idUsuario;
  nombre = other0.nombre;
  cargo = other0.cargo;
  usuario = other0.usuario;
  contrasena = other0.contrasena;
  token = other0.token;
  __isset = other0.__isset;
}
UsuarioClienteEscritorio& UsuarioClienteEscritorio::operator=(const UsuarioClienteEscritorio& other1) {
  idUsuario = other1.idUsuario;
  nombre = other1.nombre;
  cargo = other1.cargo;
  usuario = other1.usuario;
  contrasena = other1.contrasena;
  token = other1.token;
  __isset = other1.__isset;
  return *this;
}
void UsuarioClienteEscritorio::printTo(std::ostream& out) const {
  using ::apache::thrift::to_string;
  out << "UsuarioClienteEscritorio(";
  out << "idUsuario=" << to_string(idUsuario);
  out << ", " << "nombre=" << to_string(nombre);
  out << ", " << "cargo=" << to_string(cargo);
  out << ", " << "usuario=" << to_string(usuario);
  out << ", " << "contrasena=" << to_string(contrasena);
  out << ", " << "token=" << to_string(token);
  out << ")";
}


Dictamen::~Dictamen() throw() {
}


void Dictamen::__set_idDictamen(const int32_t val) {
  this->idDictamen = val;
}

void Dictamen::__set_folio(const std::string& val) {
  this->folio = val;
}

void Dictamen::__set_descripcion(const std::string& val) {
  this->descripcion = val;
}

void Dictamen::__set_fechaHora(const std::string& val) {
  this->fechaHora = val;
}

void Dictamen::__set_idIncidente(const int32_t val) {
  this->idIncidente = val;
}

void Dictamen::__set_idUsuario(const int32_t val) {
  this->idUsuario = val;
}
std::ostream& operator<<(std::ostream& out, const Dictamen& obj)
{
  obj.printTo(out);
  return out;
}


uint32_t Dictamen::read(::apache::thrift::protocol::TProtocol* iprot) {

  ::apache::thrift::protocol::TInputRecursionTracker tracker(*iprot);
  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;


  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          xfer += iprot->readI32(this->idDictamen);
          this->__isset.idDictamen = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 2:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->folio);
          this->__isset.folio = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 3:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->descripcion);
          this->__isset.descripcion = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 4:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->fechaHora);
          this->__isset.fechaHora = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 5:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          xfer += iprot->readI32(this->idIncidente);
          this->__isset.idIncidente = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 6:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          xfer += iprot->readI32(this->idUsuario);
          this->__isset.idUsuario = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  return xfer;
}

uint32_t Dictamen::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  ::apache::thrift::protocol::TOutputRecursionTracker tracker(*oprot);
  xfer += oprot->writeStructBegin("Dictamen");

  xfer += oprot->writeFieldBegin("idDictamen", ::apache::thrift::protocol::T_I32, 1);
  xfer += oprot->writeI32(this->idDictamen);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("folio", ::apache::thrift::protocol::T_STRING, 2);
  xfer += oprot->writeString(this->folio);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("descripcion", ::apache::thrift::protocol::T_STRING, 3);
  xfer += oprot->writeString(this->descripcion);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("fechaHora", ::apache::thrift::protocol::T_STRING, 4);
  xfer += oprot->writeString(this->fechaHora);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("idIncidente", ::apache::thrift::protocol::T_I32, 5);
  xfer += oprot->writeI32(this->idIncidente);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("idUsuario", ::apache::thrift::protocol::T_I32, 6);
  xfer += oprot->writeI32(this->idUsuario);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  return xfer;
}

void swap(Dictamen &a, Dictamen &b) {
  using ::std::swap;
  swap(a.idDictamen, b.idDictamen);
  swap(a.folio, b.folio);
  swap(a.descripcion, b.descripcion);
  swap(a.fechaHora, b.fechaHora);
  swap(a.idIncidente, b.idIncidente);
  swap(a.idUsuario, b.idUsuario);
  swap(a.__isset, b.__isset);
}

Dictamen::Dictamen(const Dictamen& other2) {
  idDictamen = other2.idDictamen;
  folio = other2.folio;
  descripcion = other2.descripcion;
  fechaHora = other2.fechaHora;
  idIncidente = other2.idIncidente;
  idUsuario = other2.idUsuario;
  __isset = other2.__isset;
}
Dictamen& Dictamen::operator=(const Dictamen& other3) {
  idDictamen = other3.idDictamen;
  folio = other3.folio;
  descripcion = other3.descripcion;
  fechaHora = other3.fechaHora;
  idIncidente = other3.idIncidente;
  idUsuario = other3.idUsuario;
  __isset = other3.__isset;
  return *this;
}
void Dictamen::printTo(std::ostream& out) const {
  using ::apache::thrift::to_string;
  out << "Dictamen(";
  out << "idDictamen=" << to_string(idDictamen);
  out << ", " << "folio=" << to_string(folio);
  out << ", " << "descripcion=" << to_string(descripcion);
  out << ", " << "fechaHora=" << to_string(fechaHora);
  out << ", " << "idIncidente=" << to_string(idIncidente);
  out << ", " << "idUsuario=" << to_string(idUsuario);
  out << ")";
}


Incidente::~Incidente() throw() {
}


void Incidente::__set_idIncidente(const int32_t val) {
  this->idIncidente = val;
}

void Incidente::__set_ciudad(const std::string& val) {
  this->ciudad = val;
}

void Incidente::__set_fecha(const std::string& val) {
  this->fecha = val;
}

void Incidente::__set_hora(const int32_t val) {
  this->hora = val;
}

void Incidente::__set_estado(const int32_t val) {
  this->estado = val;
}
std::ostream& operator<<(std::ostream& out, const Incidente& obj)
{
  obj.printTo(out);
  return out;
}


uint32_t Incidente::read(::apache::thrift::protocol::TProtocol* iprot) {

  ::apache::thrift::protocol::TInputRecursionTracker tracker(*iprot);
  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;


  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          xfer += iprot->readI32(this->idIncidente);
          this->__isset.idIncidente = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 2:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->ciudad);
          this->__isset.ciudad = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 4:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->fecha);
          this->__isset.fecha = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 5:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          xfer += iprot->readI32(this->hora);
          this->__isset.hora = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 6:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          xfer += iprot->readI32(this->estado);
          this->__isset.estado = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  return xfer;
}

uint32_t Incidente::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  ::apache::thrift::protocol::TOutputRecursionTracker tracker(*oprot);
  xfer += oprot->writeStructBegin("Incidente");

  xfer += oprot->writeFieldBegin("idIncidente", ::apache::thrift::protocol::T_I32, 1);
  xfer += oprot->writeI32(this->idIncidente);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("ciudad", ::apache::thrift::protocol::T_STRING, 2);
  xfer += oprot->writeString(this->ciudad);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("fecha", ::apache::thrift::protocol::T_STRING, 4);
  xfer += oprot->writeString(this->fecha);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("hora", ::apache::thrift::protocol::T_I32, 5);
  xfer += oprot->writeI32(this->hora);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("estado", ::apache::thrift::protocol::T_I32, 6);
  xfer += oprot->writeI32(this->estado);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  return xfer;
}

void swap(Incidente &a, Incidente &b) {
  using ::std::swap;
  swap(a.idIncidente, b.idIncidente);
  swap(a.ciudad, b.ciudad);
  swap(a.fecha, b.fecha);
  swap(a.hora, b.hora);
  swap(a.estado, b.estado);
  swap(a.__isset, b.__isset);
}

Incidente::Incidente(const Incidente& other4) {
  idIncidente = other4.idIncidente;
  ciudad = other4.ciudad;
  fecha = other4.fecha;
  hora = other4.hora;
  estado = other4.estado;
  __isset = other4.__isset;
}
Incidente& Incidente::operator=(const Incidente& other5) {
  idIncidente = other5.idIncidente;
  ciudad = other5.ciudad;
  fecha = other5.fecha;
  hora = other5.hora;
  estado = other5.estado;
  __isset = other5.__isset;
  return *this;
}
void Incidente::printTo(std::ostream& out) const {
  using ::apache::thrift::to_string;
  out << "Incidente(";
  out << "idIncidente=" << to_string(idIncidente);
  out << ", " << "ciudad=" << to_string(ciudad);
  out << ", " << "fecha=" << to_string(fecha);
  out << ", " << "hora=" << to_string(hora);
  out << ", " << "estado=" << to_string(estado);
  out << ")";
}


Conductor::~Conductor() throw() {
}


void Conductor::__set_idConductor(const int32_t val) {
  this->idConductor = val;
}

void Conductor::__set_nombre(const std::string& val) {
  this->nombre = val;
}

void Conductor::__set_fechaNacimiento(const std::string& val) {
  this->fechaNacimiento = val;
}

void Conductor::__set_numLicencia(const std::string& val) {
  this->numLicencia = val;
}

void Conductor::__set_telefono(const std::string& val) {
  this->telefono = val;
}

void Conductor::__set_contrasena(const std::string& val) {
  this->contrasena = val;
}

void Conductor::__set_token(const std::string& val) {
  this->token = val;
}
std::ostream& operator<<(std::ostream& out, const Conductor& obj)
{
  obj.printTo(out);
  return out;
}


uint32_t Conductor::read(::apache::thrift::protocol::TProtocol* iprot) {

  ::apache::thrift::protocol::TInputRecursionTracker tracker(*iprot);
  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;


  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          xfer += iprot->readI32(this->idConductor);
          this->__isset.idConductor = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 2:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->nombre);
          this->__isset.nombre = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 3:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->fechaNacimiento);
          this->__isset.fechaNacimiento = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 4:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->numLicencia);
          this->__isset.numLicencia = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 5:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->telefono);
          this->__isset.telefono = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 6:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->contrasena);
          this->__isset.contrasena = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 7:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->token);
          this->__isset.token = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  return xfer;
}

uint32_t Conductor::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  ::apache::thrift::protocol::TOutputRecursionTracker tracker(*oprot);
  xfer += oprot->writeStructBegin("Conductor");

  xfer += oprot->writeFieldBegin("idConductor", ::apache::thrift::protocol::T_I32, 1);
  xfer += oprot->writeI32(this->idConductor);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("nombre", ::apache::thrift::protocol::T_STRING, 2);
  xfer += oprot->writeString(this->nombre);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("fechaNacimiento", ::apache::thrift::protocol::T_STRING, 3);
  xfer += oprot->writeString(this->fechaNacimiento);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("numLicencia", ::apache::thrift::protocol::T_STRING, 4);
  xfer += oprot->writeString(this->numLicencia);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("telefono", ::apache::thrift::protocol::T_STRING, 5);
  xfer += oprot->writeString(this->telefono);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("contrasena", ::apache::thrift::protocol::T_STRING, 6);
  xfer += oprot->writeString(this->contrasena);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("token", ::apache::thrift::protocol::T_STRING, 7);
  xfer += oprot->writeString(this->token);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  return xfer;
}

void swap(Conductor &a, Conductor &b) {
  using ::std::swap;
  swap(a.idConductor, b.idConductor);
  swap(a.nombre, b.nombre);
  swap(a.fechaNacimiento, b.fechaNacimiento);
  swap(a.numLicencia, b.numLicencia);
  swap(a.telefono, b.telefono);
  swap(a.contrasena, b.contrasena);
  swap(a.token, b.token);
  swap(a.__isset, b.__isset);
}

Conductor::Conductor(const Conductor& other6) {
  idConductor = other6.idConductor;
  nombre = other6.nombre;
  fechaNacimiento = other6.fechaNacimiento;
  numLicencia = other6.numLicencia;
  telefono = other6.telefono;
  contrasena = other6.contrasena;
  token = other6.token;
  __isset = other6.__isset;
}
Conductor& Conductor::operator=(const Conductor& other7) {
  idConductor = other7.idConductor;
  nombre = other7.nombre;
  fechaNacimiento = other7.fechaNacimiento;
  numLicencia = other7.numLicencia;
  telefono = other7.telefono;
  contrasena = other7.contrasena;
  token = other7.token;
  __isset = other7.__isset;
  return *this;
}
void Conductor::printTo(std::ostream& out) const {
  using ::apache::thrift::to_string;
  out << "Conductor(";
  out << "idConductor=" << to_string(idConductor);
  out << ", " << "nombre=" << to_string(nombre);
  out << ", " << "fechaNacimiento=" << to_string(fechaNacimiento);
  out << ", " << "numLicencia=" << to_string(numLicencia);
  out << ", " << "telefono=" << to_string(telefono);
  out << ", " << "contrasena=" << to_string(contrasena);
  out << ", " << "token=" << to_string(token);
  out << ")";
}


Reporte::~Reporte() throw() {
}


void Reporte::__set_idReporte(const int32_t val) {
  this->idReporte = val;
}

void Reporte::__set_latitud(const double val) {
  this->latitud = val;
}

void Reporte::__set_longitud(const double val) {
  this->longitud = val;
}

void Reporte::__set_nombreConductor(const std::string& val) {
  this->nombreConductor = val;
}

void Reporte::__set_nombreAseguradora(const std::string& val) {
  this->nombreAseguradora = val;
}

void Reporte::__set_numPoliza(const std::string& val) {
  this->numPoliza = val;
}

void Reporte::__set_marca(const std::string& val) {
  this->marca = val;
}

void Reporte::__set_modelo(const std::string& val) {
  this->modelo = val;
}

void Reporte::__set_color(const std::string& val) {
  this->color = val;
}

void Reporte::__set_placa(const std::string& val) {
  this->placa = val;
}

void Reporte::__set_fechaHora(const std::string& val) {
  this->fechaHora = val;
}

void Reporte::__set_idConductor(const int32_t val) {
  this->idConductor = val;
}

void Reporte::__set_idVehiculo(const int32_t val) {
  this->idVehiculo = val;
}

void Reporte::__set_idIncidente(const int32_t val) {
  this->idIncidente = val;
}
std::ostream& operator<<(std::ostream& out, const Reporte& obj)
{
  obj.printTo(out);
  return out;
}


uint32_t Reporte::read(::apache::thrift::protocol::TProtocol* iprot) {

  ::apache::thrift::protocol::TInputRecursionTracker tracker(*iprot);
  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;


  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          xfer += iprot->readI32(this->idReporte);
          this->__isset.idReporte = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 2:
        if (ftype == ::apache::thrift::protocol::T_DOUBLE) {
          xfer += iprot->readDouble(this->latitud);
          this->__isset.latitud = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 3:
        if (ftype == ::apache::thrift::protocol::T_DOUBLE) {
          xfer += iprot->readDouble(this->longitud);
          this->__isset.longitud = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 4:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->nombreConductor);
          this->__isset.nombreConductor = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 5:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->nombreAseguradora);
          this->__isset.nombreAseguradora = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 6:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->numPoliza);
          this->__isset.numPoliza = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 7:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->marca);
          this->__isset.marca = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 8:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->modelo);
          this->__isset.modelo = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 9:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->color);
          this->__isset.color = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 10:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->placa);
          this->__isset.placa = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 11:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->fechaHora);
          this->__isset.fechaHora = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 12:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          xfer += iprot->readI32(this->idConductor);
          this->__isset.idConductor = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 13:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          xfer += iprot->readI32(this->idVehiculo);
          this->__isset.idVehiculo = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 14:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          xfer += iprot->readI32(this->idIncidente);
          this->__isset.idIncidente = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  return xfer;
}

uint32_t Reporte::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  ::apache::thrift::protocol::TOutputRecursionTracker tracker(*oprot);
  xfer += oprot->writeStructBegin("Reporte");

  xfer += oprot->writeFieldBegin("idReporte", ::apache::thrift::protocol::T_I32, 1);
  xfer += oprot->writeI32(this->idReporte);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("latitud", ::apache::thrift::protocol::T_DOUBLE, 2);
  xfer += oprot->writeDouble(this->latitud);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("longitud", ::apache::thrift::protocol::T_DOUBLE, 3);
  xfer += oprot->writeDouble(this->longitud);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("nombreConductor", ::apache::thrift::protocol::T_STRING, 4);
  xfer += oprot->writeString(this->nombreConductor);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("nombreAseguradora", ::apache::thrift::protocol::T_STRING, 5);
  xfer += oprot->writeString(this->nombreAseguradora);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("numPoliza", ::apache::thrift::protocol::T_STRING, 6);
  xfer += oprot->writeString(this->numPoliza);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("marca", ::apache::thrift::protocol::T_STRING, 7);
  xfer += oprot->writeString(this->marca);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("modelo", ::apache::thrift::protocol::T_STRING, 8);
  xfer += oprot->writeString(this->modelo);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("color", ::apache::thrift::protocol::T_STRING, 9);
  xfer += oprot->writeString(this->color);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("placa", ::apache::thrift::protocol::T_STRING, 10);
  xfer += oprot->writeString(this->placa);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("fechaHora", ::apache::thrift::protocol::T_STRING, 11);
  xfer += oprot->writeString(this->fechaHora);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("idConductor", ::apache::thrift::protocol::T_I32, 12);
  xfer += oprot->writeI32(this->idConductor);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("idVehiculo", ::apache::thrift::protocol::T_I32, 13);
  xfer += oprot->writeI32(this->idVehiculo);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("idIncidente", ::apache::thrift::protocol::T_I32, 14);
  xfer += oprot->writeI32(this->idIncidente);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  return xfer;
}

void swap(Reporte &a, Reporte &b) {
  using ::std::swap;
  swap(a.idReporte, b.idReporte);
  swap(a.latitud, b.latitud);
  swap(a.longitud, b.longitud);
  swap(a.nombreConductor, b.nombreConductor);
  swap(a.nombreAseguradora, b.nombreAseguradora);
  swap(a.numPoliza, b.numPoliza);
  swap(a.marca, b.marca);
  swap(a.modelo, b.modelo);
  swap(a.color, b.color);
  swap(a.placa, b.placa);
  swap(a.fechaHora, b.fechaHora);
  swap(a.idConductor, b.idConductor);
  swap(a.idVehiculo, b.idVehiculo);
  swap(a.idIncidente, b.idIncidente);
  swap(a.__isset, b.__isset);
}

Reporte::Reporte(const Reporte& other8) {
  idReporte = other8.idReporte;
  latitud = other8.latitud;
  longitud = other8.longitud;
  nombreConductor = other8.nombreConductor;
  nombreAseguradora = other8.nombreAseguradora;
  numPoliza = other8.numPoliza;
  marca = other8.marca;
  modelo = other8.modelo;
  color = other8.color;
  placa = other8.placa;
  fechaHora = other8.fechaHora;
  idConductor = other8.idConductor;
  idVehiculo = other8.idVehiculo;
  idIncidente = other8.idIncidente;
  __isset = other8.__isset;
}
Reporte& Reporte::operator=(const Reporte& other9) {
  idReporte = other9.idReporte;
  latitud = other9.latitud;
  longitud = other9.longitud;
  nombreConductor = other9.nombreConductor;
  nombreAseguradora = other9.nombreAseguradora;
  numPoliza = other9.numPoliza;
  marca = other9.marca;
  modelo = other9.modelo;
  color = other9.color;
  placa = other9.placa;
  fechaHora = other9.fechaHora;
  idConductor = other9.idConductor;
  idVehiculo = other9.idVehiculo;
  idIncidente = other9.idIncidente;
  __isset = other9.__isset;
  return *this;
}
void Reporte::printTo(std::ostream& out) const {
  using ::apache::thrift::to_string;
  out << "Reporte(";
  out << "idReporte=" << to_string(idReporte);
  out << ", " << "latitud=" << to_string(latitud);
  out << ", " << "longitud=" << to_string(longitud);
  out << ", " << "nombreConductor=" << to_string(nombreConductor);
  out << ", " << "nombreAseguradora=" << to_string(nombreAseguradora);
  out << ", " << "numPoliza=" << to_string(numPoliza);
  out << ", " << "marca=" << to_string(marca);
  out << ", " << "modelo=" << to_string(modelo);
  out << ", " << "color=" << to_string(color);
  out << ", " << "placa=" << to_string(placa);
  out << ", " << "fechaHora=" << to_string(fechaHora);
  out << ", " << "idConductor=" << to_string(idConductor);
  out << ", " << "idVehiculo=" << to_string(idVehiculo);
  out << ", " << "idIncidente=" << to_string(idIncidente);
  out << ")";
}


Foto::~Foto() throw() {
}


void Foto::__set_idFoto(const int32_t val) {
  this->idFoto = val;
}

void Foto::__set_idReporte(const int32_t val) {
  this->idReporte = val;
}

void Foto::__set_foto(const std::string& val) {
  this->foto = val;
}

void Foto::__set_tiempoCreacion(const std::string& val) {
  this->tiempoCreacion = val;
}
std::ostream& operator<<(std::ostream& out, const Foto& obj)
{
  obj.printTo(out);
  return out;
}


uint32_t Foto::read(::apache::thrift::protocol::TProtocol* iprot) {

  ::apache::thrift::protocol::TInputRecursionTracker tracker(*iprot);
  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;


  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          xfer += iprot->readI32(this->idFoto);
          this->__isset.idFoto = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 2:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          xfer += iprot->readI32(this->idReporte);
          this->__isset.idReporte = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 3:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->foto);
          this->__isset.foto = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 4:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->tiempoCreacion);
          this->__isset.tiempoCreacion = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  return xfer;
}

uint32_t Foto::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  ::apache::thrift::protocol::TOutputRecursionTracker tracker(*oprot);
  xfer += oprot->writeStructBegin("Foto");

  xfer += oprot->writeFieldBegin("idFoto", ::apache::thrift::protocol::T_I32, 1);
  xfer += oprot->writeI32(this->idFoto);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("idReporte", ::apache::thrift::protocol::T_I32, 2);
  xfer += oprot->writeI32(this->idReporte);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("foto", ::apache::thrift::protocol::T_STRING, 3);
  xfer += oprot->writeString(this->foto);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("tiempoCreacion", ::apache::thrift::protocol::T_STRING, 4);
  xfer += oprot->writeString(this->tiempoCreacion);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  return xfer;
}

void swap(Foto &a, Foto &b) {
  using ::std::swap;
  swap(a.idFoto, b.idFoto);
  swap(a.idReporte, b.idReporte);
  swap(a.foto, b.foto);
  swap(a.tiempoCreacion, b.tiempoCreacion);
  swap(a.__isset, b.__isset);
}

Foto::Foto(const Foto& other10) {
  idFoto = other10.idFoto;
  idReporte = other10.idReporte;
  foto = other10.foto;
  tiempoCreacion = other10.tiempoCreacion;
  __isset = other10.__isset;
}
Foto& Foto::operator=(const Foto& other11) {
  idFoto = other11.idFoto;
  idReporte = other11.idReporte;
  foto = other11.foto;
  tiempoCreacion = other11.tiempoCreacion;
  __isset = other11.__isset;
  return *this;
}
void Foto::printTo(std::ostream& out) const {
  using ::apache::thrift::to_string;
  out << "Foto(";
  out << "idFoto=" << to_string(idFoto);
  out << ", " << "idReporte=" << to_string(idReporte);
  out << ", " << "foto=" << to_string(foto);
  out << ", " << "tiempoCreacion=" << to_string(tiempoCreacion);
  out << ")";
}


Vehiculo::~Vehiculo() throw() {
}


void Vehiculo::__set_idVehiculo(const int32_t val) {
  this->idVehiculo = val;
}

void Vehiculo::__set_marca(const std::string& val) {
  this->marca = val;
}

void Vehiculo::__set_modelo(const std::string& val) {
  this->modelo = val;
}

void Vehiculo::__set_anio(const int32_t val) {
  this->anio = val;
}

void Vehiculo::__set_color(const std::string& val) {
  this->color = val;
}

void Vehiculo::__set_nombreAseguradora(const std::string& val) {
  this->nombreAseguradora = val;
}

void Vehiculo::__set_numPoliza(const std::string& val) {
  this->numPoliza = val;
}

void Vehiculo::__set_placa(const std::string& val) {
  this->placa = val;
}
std::ostream& operator<<(std::ostream& out, const Vehiculo& obj)
{
  obj.printTo(out);
  return out;
}


uint32_t Vehiculo::read(::apache::thrift::protocol::TProtocol* iprot) {

  ::apache::thrift::protocol::TInputRecursionTracker tracker(*iprot);
  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;


  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          xfer += iprot->readI32(this->idVehiculo);
          this->__isset.idVehiculo = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 2:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->marca);
          this->__isset.marca = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 3:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->modelo);
          this->__isset.modelo = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 4:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          xfer += iprot->readI32(this->anio);
          this->__isset.anio = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 5:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->color);
          this->__isset.color = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 6:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->nombreAseguradora);
          this->__isset.nombreAseguradora = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 7:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->numPoliza);
          this->__isset.numPoliza = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 8:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->placa);
          this->__isset.placa = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  return xfer;
}

uint32_t Vehiculo::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  ::apache::thrift::protocol::TOutputRecursionTracker tracker(*oprot);
  xfer += oprot->writeStructBegin("Vehiculo");

  xfer += oprot->writeFieldBegin("idVehiculo", ::apache::thrift::protocol::T_I32, 1);
  xfer += oprot->writeI32(this->idVehiculo);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("marca", ::apache::thrift::protocol::T_STRING, 2);
  xfer += oprot->writeString(this->marca);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("modelo", ::apache::thrift::protocol::T_STRING, 3);
  xfer += oprot->writeString(this->modelo);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("anio", ::apache::thrift::protocol::T_I32, 4);
  xfer += oprot->writeI32(this->anio);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("color", ::apache::thrift::protocol::T_STRING, 5);
  xfer += oprot->writeString(this->color);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("nombreAseguradora", ::apache::thrift::protocol::T_STRING, 6);
  xfer += oprot->writeString(this->nombreAseguradora);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("numPoliza", ::apache::thrift::protocol::T_STRING, 7);
  xfer += oprot->writeString(this->numPoliza);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("placa", ::apache::thrift::protocol::T_STRING, 8);
  xfer += oprot->writeString(this->placa);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  return xfer;
}

void swap(Vehiculo &a, Vehiculo &b) {
  using ::std::swap;
  swap(a.idVehiculo, b.idVehiculo);
  swap(a.marca, b.marca);
  swap(a.modelo, b.modelo);
  swap(a.anio, b.anio);
  swap(a.color, b.color);
  swap(a.nombreAseguradora, b.nombreAseguradora);
  swap(a.numPoliza, b.numPoliza);
  swap(a.placa, b.placa);
  swap(a.__isset, b.__isset);
}

Vehiculo::Vehiculo(const Vehiculo& other12) {
  idVehiculo = other12.idVehiculo;
  marca = other12.marca;
  modelo = other12.modelo;
  anio = other12.anio;
  color = other12.color;
  nombreAseguradora = other12.nombreAseguradora;
  numPoliza = other12.numPoliza;
  placa = other12.placa;
  __isset = other12.__isset;
}
Vehiculo& Vehiculo::operator=(const Vehiculo& other13) {
  idVehiculo = other13.idVehiculo;
  marca = other13.marca;
  modelo = other13.modelo;
  anio = other13.anio;
  color = other13.color;
  nombreAseguradora = other13.nombreAseguradora;
  numPoliza = other13.numPoliza;
  placa = other13.placa;
  __isset = other13.__isset;
  return *this;
}
void Vehiculo::printTo(std::ostream& out) const {
  using ::apache::thrift::to_string;
  out << "Vehiculo(";
  out << "idVehiculo=" << to_string(idVehiculo);
  out << ", " << "marca=" << to_string(marca);
  out << ", " << "modelo=" << to_string(modelo);
  out << ", " << "anio=" << to_string(anio);
  out << ", " << "color=" << to_string(color);
  out << ", " << "nombreAseguradora=" << to_string(nombreAseguradora);
  out << ", " << "numPoliza=" << to_string(numPoliza);
  out << ", " << "placa=" << to_string(placa);
  out << ")";
}


VehiculoConductor::~VehiculoConductor() throw() {
}


void VehiculoConductor::__set_idVehiculoConductor(const int32_t val) {
  this->idVehiculoConductor = val;
}

void VehiculoConductor::__set_idConductor(const int32_t val) {
  this->idConductor = val;
}

void VehiculoConductor::__set_idVehiculo(const int32_t val) {
  this->idVehiculo = val;
}

void VehiculoConductor::__set_propietario(const std::string& val) {
  this->propietario = val;
}
std::ostream& operator<<(std::ostream& out, const VehiculoConductor& obj)
{
  obj.printTo(out);
  return out;
}


uint32_t VehiculoConductor::read(::apache::thrift::protocol::TProtocol* iprot) {

  ::apache::thrift::protocol::TInputRecursionTracker tracker(*iprot);
  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;


  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          xfer += iprot->readI32(this->idVehiculoConductor);
          this->__isset.idVehiculoConductor = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 2:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          xfer += iprot->readI32(this->idConductor);
          this->__isset.idConductor = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 3:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          xfer += iprot->readI32(this->idVehiculo);
          this->__isset.idVehiculo = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 4:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->propietario);
          this->__isset.propietario = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  return xfer;
}

uint32_t VehiculoConductor::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  ::apache::thrift::protocol::TOutputRecursionTracker tracker(*oprot);
  xfer += oprot->writeStructBegin("VehiculoConductor");

  xfer += oprot->writeFieldBegin("idVehiculoConductor", ::apache::thrift::protocol::T_I32, 1);
  xfer += oprot->writeI32(this->idVehiculoConductor);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("idConductor", ::apache::thrift::protocol::T_I32, 2);
  xfer += oprot->writeI32(this->idConductor);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("idVehiculo", ::apache::thrift::protocol::T_I32, 3);
  xfer += oprot->writeI32(this->idVehiculo);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("propietario", ::apache::thrift::protocol::T_STRING, 4);
  xfer += oprot->writeString(this->propietario);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  return xfer;
}

void swap(VehiculoConductor &a, VehiculoConductor &b) {
  using ::std::swap;
  swap(a.idVehiculoConductor, b.idVehiculoConductor);
  swap(a.idConductor, b.idConductor);
  swap(a.idVehiculo, b.idVehiculo);
  swap(a.propietario, b.propietario);
  swap(a.__isset, b.__isset);
}

VehiculoConductor::VehiculoConductor(const VehiculoConductor& other14) {
  idVehiculoConductor = other14.idVehiculoConductor;
  idConductor = other14.idConductor;
  idVehiculo = other14.idVehiculo;
  propietario = other14.propietario;
  __isset = other14.__isset;
}
VehiculoConductor& VehiculoConductor::operator=(const VehiculoConductor& other15) {
  idVehiculoConductor = other15.idVehiculoConductor;
  idConductor = other15.idConductor;
  idVehiculo = other15.idVehiculo;
  propietario = other15.propietario;
  __isset = other15.__isset;
  return *this;
}
void VehiculoConductor::printTo(std::ostream& out) const {
  using ::apache::thrift::to_string;
  out << "VehiculoConductor(";
  out << "idVehiculoConductor=" << to_string(idVehiculoConductor);
  out << ", " << "idConductor=" << to_string(idConductor);
  out << ", " << "idVehiculo=" << to_string(idVehiculo);
  out << ", " << "propietario=" << to_string(propietario);
  out << ")";
}

} // namespace
